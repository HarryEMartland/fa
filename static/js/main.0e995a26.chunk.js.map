{"version":3,"sources":["AcronymList.tsx","Data.tsx","Definitions.tsx","Test.tsx","RandomTest.tsx","Checklist.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["AcronymList","props","List","data","map","name","description","ListItem","ListItemAvatar","Avatar","ListItemText","primary","secondary","socrates","drabc","sample","preCheckList","list","postCheckList","Definitions","Accordion","AccordionSummary","expandIcon","aria-controls","Typography","AccordionDetails","theme","createTheme","palette","green","correct","values","toLowerCase","get","Test","useState","Map","setValues","percentComplete","filter","length","Box","marginTop","ThemeProvider","TextField","style","width","label","error","value","onChange","e","set","target","mt","LinearProgress","variant","color","to","Button","options","RandomTest","Math","floor","random","Checklist","component","gutterBottom","this","checklist","FormGroup","FormControlLabel","control","Checkbox","React","Component","App","className","Container","maxWidth","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.0e995a26.chunk.js","sourcesContent":["import { Avatar, List, ListItem, ListItemAvatar, ListItemText } from '@material-ui/core'\nimport React from 'react'\nimport { AcronymEntry } from './AcronymEntry'\n\nexport function AcronymList (props: { data: AcronymEntry[] }): JSX.Element {\n  return <List>\n        {props.data.map(({ name, description }) => <ListItem key={name}>\n            <ListItemAvatar>\n                <Avatar>\n                    {name[0]}\n                </Avatar>\n            </ListItemAvatar>\n            <ListItemText primary={name} secondary={description}/>\n        </ListItem>)}\n    </List>\n}\n","export const socrates = [\n  { name: 'Site', description: 'Where is the pain? Or the maximal site of the pain.' },\n  {\n    name: 'Onset',\n    description: 'When did the pain start, and was it sudden or gradual? Include also whether it is progressive or regressive.'\n  },\n  { name: 'Character', description: 'What is the pain like? An ache? Stabbing?' },\n  { name: 'Radiation', description: 'Does the pain radiate anywhere?' },\n  { name: 'Associations', description: 'Any other signs or symptoms associated with the pain?' },\n  { name: 'Time', description: 'course Does the pain follow any pattern?' },\n  { name: 'Exacerbating / relieving factors', description: 'factors Does anything change the pain?' },\n  { name: 'Severity', description: 'How bad is the pain?' }\n]\nexport const drabc = [\n  { name: 'Danger', description: 'Before approaching the casualty, always make sure the area is safe.' },\n  {\n    name: 'Response',\n    description: 'Check if the casualty is responsive or unresponsive. As you approach them, introduce yourself and ask them questions to see if you can get a response. Kneel next to their chest and gently shake their shoulders, asking, ‘What has happened?’, ‘Open your eyes!’.'\n  },\n  { name: 'Shout', description: 'Get the attention of a someone else. You may need their assistance shortly' },\n  {\n    name: 'Airway',\n    description: 'Next, you need to check that the airway is open and clear. Open the airway by placing one hand on the forehead to tilt the head back and use two fingers from the other hand to lift the chin. Check for any obstructions'\n  },\n  {\n    name: 'Breathing',\n    description: 'You now need to check if the casualty is breathing normally. Place your ear above their mouth, looking down their body. Listen for sounds of breathing and see if you can feel their breath on your cheek. Watch to see if their chest moves. Do this for 10 seconds.'\n  },\n  {\n    name: 'Circulation',\n    description: 'Once you have established they are breathing, look and check for any signs of severe bleeding.'\n  },\n  {\n    name: 'Send Help',\n    description: 'Call for assistance and if you have someone near by ask them to fetch a defibrillator'\n  }\n]\n\nexport const sample = [\n  {\n    name: 'Signs/Symptoms',\n    description: 'A symptom is a manifestation of disease apparent to the patient themself, while a sign is a manifestation of disease that you can perceive.'\n  },\n  {\n    name: 'Allergy',\n    description: 'Do they have any allergies? For example, nuts or any medication such as penicillin or aspirin?'\n  },\n  { name: 'Medication', description: 'Are they taking any medication?' },\n  {\n    name: 'Previous medical history',\n    description: 'Do they suffer from any medical condition such as diabetes, epilepsy or heart disease? Have they had any previous injuries or surgery?'\n  },\n  { name: 'Last meal', description: 'When did they last eat or drink?' },\n  {\n    name: 'Event history',\n    description: 'What happened and where? Is the incident due to an illness or an accident? Ask any people nearby what happened and look for any clues that may give you more information.'\n  }\n]\n\nexport const preCheckList = {\n  name: 'Pre Game Checklist',\n  list: [\n    { name: 'Unlock cupboards' },\n    { name: 'Room checklist' },\n    { name: 'Grab bag Checklist' },\n    { name: 'Show new people around' }\n  ]\n}\n\nexport const postCheckList = {\n  name: 'Post Game Checklist',\n  list: [\n    { name: 'Return drinks containers if running low' },\n    { name: 'Check area is clear of supporters' },\n    { name: 'Lock cupboards' },\n    { name: 'Turn off lights' },\n    { name: 'Return room box' }\n  ]\n}\n","import Accordion from '@material-ui/core/Accordion'\nimport AccordionSummary from '@material-ui/core/AccordionSummary'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\nimport Typography from '@material-ui/core/Typography'\nimport AccordionDetails from '@material-ui/core/AccordionDetails'\nimport { AcronymList } from './AcronymList'\nimport { drabc, sample, socrates } from './Data'\nimport React from 'react'\n\nexport function Definitions () {\n  return <>\n        <Accordion>\n            <AccordionSummary\n                expandIcon={<ExpandMoreIcon/>}\n                aria-controls=\"panel1a-content\">\n                <Typography>DRsABCs</Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n                <AcronymList data={drabc}/>\n            </AccordionDetails>\n        </Accordion>\n        <Accordion>\n            <AccordionSummary\n                expandIcon={<ExpandMoreIcon/>}\n                aria-controls=\"panel2a-content\">\n                <Typography>SAMPLE</Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n                <AcronymList data={sample}/>\n            </AccordionDetails>\n        </Accordion>\n        <Accordion>\n            <AccordionSummary\n                expandIcon={<ExpandMoreIcon/>}\n                aria-controls=\"panel2a-content\">\n                <Typography>SOCRATES</Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n                <AcronymList data={socrates}/>\n            </AccordionDetails>\n        </Accordion>\n    </>\n}\n","import { AcronymEntry } from './AcronymEntry'\nimport React, { useState } from 'react'\nimport { Box, Button, LinearProgress, TextField, ThemeProvider } from '@material-ui/core'\nimport { createTheme } from '@material-ui/core/styles'\nimport { green } from '@material-ui/core/colors'\nimport {\n  Link\n} from 'react-router-dom'\n\nconst theme = createTheme({\n  palette: {\n    primary: green\n  }\n})\n\nfunction correct (name: string, values: Map<string, string>): boolean {\n  return name.toLowerCase() === (values.get(name) || '').toLowerCase()\n}\n\nexport function Test (props: { data: AcronymEntry[] }): JSX.Element {\n  const { data } = props\n  const [values, setValues] = useState<Map<string, string>>(new Map())\n  const percentComplete = data.filter(({ name }) => correct(name, values)).length / data.length * 100\n  return <Box marginTop={2}>\n        <ThemeProvider theme={theme}>\n            {data.map(({ name }) => <Box key={name} marginTop={2}>\n                <TextField style={{ width: '100%' }}\n                           label={name[0]}\n                           error={!correct(name, values)}\n                           value={values.get(name)}\n                           onChange={(e) => setValues(new Map(values).set(name, e.target.value))}/>\n            </Box>)}\n            <Box mt={2}>\n                <LinearProgress variant=\"determinate\"\n                                color={percentComplete === 100 ? 'primary' : 'secondary'}\n                                value={percentComplete}/>\n            </Box>\n            <Box mt={2}>\n                <Link to={'/'}><Button variant=\"contained\" >Back</Button></Link>\n            </Box>\n        </ThemeProvider>\n    </Box>\n}\n","import { sample, drabc, socrates } from './Data'\nimport { Test } from './Test'\nimport React from 'react'\n\nconst options = [sample, drabc, socrates]\n\nexport function RandomTest ():JSX.Element {\n  return <Test data={options[Math.floor(Math.random() * options.length)]}/>\n}\n","import React from 'react'\nimport { Box, Button, Checkbox, FormControlLabel, FormGroup, Typography } from '@material-ui/core'\nimport { Link } from 'react-router-dom'\n\nexport class Checklist extends React.Component<{ checklist: { name: string; list: ({ name: string } | { name: string })[] } }> {\n  render () {\n    return <Box>\n            <Typography variant=\"h4\" component=\"div\" gutterBottom>\n                {this.props.checklist.name}\n            </Typography>\n            <FormGroup>\n                {this.props.checklist.list.map(({ name }) => <FormControlLabel key={name} control={<Checkbox/>}\n                                                                             label={name}/>)}\n            </FormGroup>\n        <Link to=\"/\"><Button variant=\"contained\">Back</Button></Link>\n\n    </Box>\n  }\n}\n","import React from 'react'\nimport './App.css'\nimport { Box, Button, Container } from '@material-ui/core'\nimport { Definitions } from './Definitions'\nimport { HashRouter as Router, Link, Route, Switch } from 'react-router-dom'\nimport { RandomTest } from './RandomTest'\nimport { postCheckList, preCheckList } from './Data'\nimport { Checklist } from './Checklist'\n\nfunction App (): JSX.Element {\n  return (\n        <Router>\n            <div className=\"App\">\n                <Container maxWidth=\"lg\">\n                    <Box marginTop={4}>\n                        <Switch>\n                            <Route path=\"/test\">\n                                <RandomTest/>\n                            </Route>\n                            <Route path=\"/checklist/pre\">\n                                <Checklist checklist={preCheckList}/>\n                            </Route>\n                            <Route path=\"/checklist/post\">\n                                <Checklist checklist={postCheckList}/>\n                            </Route>\n                            <Route path=\"/\">\n                                <Definitions/>\n                                <Box mt={2}>\n                                    <Link to={'/test'}><Button variant=\"contained\">Test yourself</Button></Link>\n                                </Box>\n                                <Box mt={2}>\n                                    <Link to=\"/checklist/pre\"><Button variant=\"contained\">Pre Game\n                                        Checklist</Button></Link>\n                                </Box>\n                                <Box mt={2}>\n                                    <Link to=\"/checklist/post\"><Button variant=\"contained\">Post Game Checklist</Button></Link>\n                                </Box>\n                            </Route>\n                        </Switch>\n                    </Box>\n                </Container>\n\n            </div>\n        </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nfunction registerValidSW (swUrl: string, config?: Config):void {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://cra.link/PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl: string, config?: Config): void {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n            (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function register (config?: Config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nexport function unregister (): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}